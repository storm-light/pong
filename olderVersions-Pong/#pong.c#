/* attempt at PONG lel xd */
/* NOTES:

   ORGANIZE IS MOST IMPORTANT :/


*/
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <SDL2/SDL_timer.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

#define WINDOW_WIDTH (640)
#define WINDOW_HEIGHT (480)

#define SPEED (150)
#define ACCELERATION (10)

void error (char * msg)
{
    printf("%s eroor: %s\n", msg, SDL_GetError());
}

typedef struct sprite
{
    SDL_RECT de;
    ;
    
    /* keyboard inputs which are given */
    int up = 0;
    int down = 0;
    
    /* set to 1 once x button pressed */
    int closeME = 0, gameover = 0;

    /* animation loop */
    while (!closeME)
    {

        /* event processor */
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            switch (event.type)
            {
            case SDL_QUIT:
                closeME = 1;
                break;
            case SDL_KEYDOWN:
                switch (event.key.keysym.scancode)
                {
                case SDL_SCANCODE_W:
                case SDL_SCANCODE_UP:
                    up = 1;
                    break;
                case SDL_SCANCODE_S:
                case SDL_SCANCODE_DOWN:
                    down = 1;
                    break;
                }
                break;
            case SDL_KEYUP:
                switch (event.key.keysym.scancode)
                {
                case SDL_SCANCODE_W:
                case SDL_SCANCODE_UP:
                    up = 0;
                    break;
                case SDL_SCANCODE_S:
                case SDL_SCANCODE_DOWN:
                    down = 0;
                    break;
                }
                break;
            }
        }

        /* velocity calc'ed */
        if (up && !down) y_vel += -y_acc;
        if (down && !up) y_vel += y_acc;

        /* updates positions */
        y_pos += y_vel / 60;

        ballX += ballXV / 60;
        ballY += ballYV / 60;

        /* boundary detection */
        if (y_pos >= WINDOW_HEIGHT - dest.h)
        {
            y_pos = WINDOW_HEIGHT - dest.h;
            y_vel = -y_vel * 0.3;
        }
        if (y_pos <= 0)
        {
            y_pos = 0;
            y_vel = -y_vel * 0.3;
        }

        if (ballX <= 0)
        {
            ballX = 0;
            ballXV = -ballXV;
        }
        if (ballY <= 0)
        {
            ballY = 0;
            ballYV = - ballYV;
        }
        if (ballX >= (WINDOW_WIDTH - ball.w))
        {
            ballX = WINDOW_WIDTH - ball.w;
            ballXV = -ballXV;
        }
        if (ballY >= (WINDOW_HEIGHT - ball.h))
        {
            ballY = WINDOW_HEIGHT - ball.h;
            ballYV = -ballYV;
        }
        
        /* collision detection between ball and padle? */
        if (CollisionDetected(sp ball, sp paddle) == 0)
        {
                gameover = 1;
                closeME = 1;
        }
        else
        {
            ball.xvel = -ball.xvel;
            if (paddle.yvel != 0) ball.yvel = paddle.yvel;
            else ball.yvel = rand() % 10;
        }
        
        /* sets positions for the images */
        dest.x = (int) x_pos;
        dest.y = (int) y_pos;

        ball.x = (int) ballX;
        ball.y = (int) ballY;

        /* clears window */
        SDL_RenderClear(rend);

        SDL_SetRenderDrawColor(rend, 75, 183, 229, 255);
        /* draws image to window */
        SDL_RenderFillRect(rend, NULL);

        SDL_SetRenderDrawColor(rend, 255, 0, 0, 255);

        rectangle.x = 0;
        rectangle.y = 0;
        rectangle.w = dest.w;
        rectangle.h = WINDOW_HEIGHT;
        SDL_RenderFillRect(rend, &rectangle);

        SDL_RenderCopy(rend, tex, NULL, &dest);
        SDL_RenderCopy(rend, text, NULL, &ball);
        SDL_RenderPresent(rend);

        /* 60 fps omfg it works */
        SDL_Delay(1000/60);
    }

    SDL_RenderClear(rend);
    SDL_RenderCopy(rend, goo, NULL, NULL);
    /* SDL_SetRenderDrawColor(rend, 255, 0, 0, 255); */
    SDL_RenderPresent(rend);
    SDL_Delay (1000);

    /* cleans up everything */
    SDL_DestroyTexture(tex);
    SDL_DestroyTexture(text);
    SDL_DestroyRenderer(rend);
    SDL_DestroyWindow(win);
    SDL_Quit();

}
